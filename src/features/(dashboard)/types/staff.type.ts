import { z } from 'zod';
import { staffFormSchema } from './staff.schema';
import { staffImportRowSchema } from './staff.schema';
import { SearchStaffSchema } from './staff.schema';
import { SearchSchema } from './schema';
 

// Import Staff: Modal Steps
export type ImportStep =
  | 'upload'
  | 'review'
  | 'processing'
  | 'completed'
  | 'error';

// Import Staff: Modal Summary
export interface ImportSummary {
  successCount: number;
  failureCount: number;
  errors: Array<{
    rowNumber: number;
    message: string;
    email?: string;
    name?: string;
  }>;
}

// Staff Status
export type StaffStatus =
  | 'clocked_in'
  | 'clocked_out'
  | 'pending_onboarding'
  | 'on_break';

// Staff Break
export interface Break {
  id?: string;
  from: string; // ISO datetime string
  to: string; // ISO datetime string
  type?: string; // e.g., "lunch", "short_break"
}

// Staff Time Log
export interface TimeLog {
  id: string;
  date: string; // ISO date string 'YYYY-MM-DD'
  clockInTime: string; // ISO datetime string
  clockOutTime: string | null; // ISO datetime string, null if currently clocked in
  breaks: Break[];
}

// Staff Wage Type
export type WageType = 'manual' | 'team_based' | 'award_rate';

// Staff 
export type Staff = z.infer<typeof staffFormSchema> & {
  id: string;
  timeLogs: TimeLog[];
};

// For API response when fetching a list of staff members (includes pagination info)
export interface StaffDataResponse {
  staffs: Staff[];
  totalCount: number; // Total number of staff members matching filters
  page: number; // Current page number
  pageSize: number; // Number of items per page
}

// For representing a row of data during CSV import review
export interface StaffImportRow {
  id: string; // Temporary client-side ID for the review table row
  name?: string; // Full name from CSV
  email?: string;
  status:
    | 'new'
    | 'duplicate_email'
    | 'error'
    | 'missing_email'
    | 'missing_name'; // Status after initial validation
  errorMessage?: string; // Description of error if status is 'error' or 'duplicate_email'
}

export type StaffFormData = Omit<Staff, 'id' | 'timeLogs'> & {
  // ID is usually generated by the backend or present for edits.
  // Status might be set separately or have a default during creation.
};

export type StaffImportRowValues = z.infer<typeof staffImportRowSchema>;

export type SearchStaffData = z.infer<typeof SearchStaffSchema>;

export type SearchData = z.infer<typeof SearchSchema>;
